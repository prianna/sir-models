{
    "contents" : "# the cross scale simulator\n\n# Basic idea of the model is that we have k viral strains that compete within any infected host. \n# The within-host dynamics of these viral strains is specified by the within.host function \n# (e.g. a linear model below for illustrative purposes). An infected host only begins transmitting\n# when the total viral load reaches the critical viral load (v.crit) which is calculated in the\n# function, critical. For a host with a given viral load that has made a contact with an infected\n# individual, the function transmission determines the initial viral load in the contacted individual.\n# Finally, the function between.host runs the full dynamics by tracking each generation of infected hosts. \n# These infected hosts can infect others for T units of time after their viral load hits v.crit. \n# During these T units of time, they make contacts at a rate beta and transmit to the next generation of hosts\n\n# need the following library to compute the matrix exponential \nlibrary(Matrix)\n\n###########################\n# global parameter choices (can change this later)\n###########################\n\nk=2; # number of viral types\nN=10e10 # maximal load\nv.crit=10000 # critical load for transmission\nbeta=2/15 # contact rate\nb=seq(1*10^-10, 1*10^-6, length=k) # weights for transmission\nT=15 # length of infection period after viral load hits v.crit\nt.max=10 # search for v.crit on the interval (0,t.max). May need to adjust this depending on parameter values. \n\n\n# the within host dynamics parameters for a simple linear model of the form A=diag(r)+M \nr=seq(1,1.1,length=k) # growth rates of viral types\nM=matrix(0,k,k) # mutation matrix (one steps to the right)\nM[-1,-k]=diag(k-1)*10^-5\nM[-k, -1]=diag(k-1)*10^-5\nA=M+diag(r) # the viral dynamic matrix\n\n##############################\n# the within host function\n##############################\n# input: initial condition v, vector of times \n# output: list with matrix with viral numbers at the desired times and the time to reaching v.crit\n# this within host model gives exponential growth until the population hits the maximal viral load N \n# at which time the dynamics are normalized. Note: this within.host function first solves the time \n# to v.crit with the function critical \tand uses that initial condition. \n\nwithin.host=function(v,times){\n\tL=length(times) # number of evaluations\n\tk=length(v) # number of viral types\n\tV=matrix(0,k,L) # matrix for output; columns are the viral loads at the specified times. \n\tt.crit=critical(v) # solve for time to v.crit\n\tfor(i in 1:L){\n\t\ttemp=as.matrix( expm( A*(t.crit+times[i])) %*%v );\n\t\tif(sum(temp)>N)temp=N*temp/sum(temp) # normalize if viral load is greater than N\n\t\tV[,i]=temp\n\t\t}\n\treturn(list(V=V,t.crit=t.crit))\n}\n\n#############################\n# the critical function\n#############################\n# input : viral column vector\n# output: time to reach v.crit\n\ncritical=function(v){\n\tf=function(t)(sum(expm(A*t)%*%v)-v.crit)^2 \n\tout=optimize(f,c(0,t.max))\n\tt=out$minimum\n\treturn(t)\t\n}\n\n############################\n# single strain R0 function\n############################\n# input: nada\n# output: R0 (vector)\n# computes the R0s for the single strains \n\nR.naught=function(){\n\tR=numeric(k)\n\tfor(i in 1:k){\n\t\tS=function(t)exp(-b[i]*pmin(v.crit*exp(r[i]*t),N))\n\t\tR[i]=beta*T*(1-integrate(S,0,T)$value/T)\n\t\t}\n\t\treturn(R)\t\n}\n\n\n###################################\n# the transmission function\n###################################\n# input: matrix of viral column vectors\n# output: viral type of newly infected\n\ntransmission=function(V){\n\tn=length(V[1,]) # number of viral vectors\n \tW=matrix(rpois(n=k*n,lambda=V*b),k,n)\n\treturn(W)\n}\n\n#######################################\n# between host dynamics (the cross scale model)\n########################################\n# input: initial infected type v, maximum cases\n# output: list with who (who infected this individual, 0 for case 1), when (when was this individual infected), type (matrix of types)\n\nbetween.host=function(v,cases){\n    type=matrix(v,k,1) # holds the intial viral types for all individuals; dynamically increased by adding columns. \n\twho=c(0) # vector of who was the parent of the infected individual\n\twhen=c(0) # when the individual was initially infected\n\tgen=c(0) # generation when individual was infected\n\ttotal=1 # total cases\n\tcurrent=1 # current cases\n\tgen.count=1\n\n\twhile(total<(cases+1)&&current>0){\n\t\t# next line determines the number of contacts each individual in the current generation has with other individuals \n\t\tkids=rpois(n=current,lambda=beta*T)\n\t\t# the next loop determines at what times the contact events occur, the transmission of viral particles, and removes any instances where transmitted load is zero\n\t\tfor(i in 1:current){ # loop for all individuals in current generation\n\t\t\tif(kids[i]>0){ # if current individual has a positive number of contacts do the following \n\t\t\t\tv.start=type[,total-current+i] # get the initial viral load of the current individual \n\t\t\t\tt=runif(kids[i])*T # find the times after t.crit at which the contact events occur\n\t\t\t\tout=within.host(v.start,t) # find the viral load at the contact events and t.crit\n\t\t\t\tv.out=out$V\n\t\t\t\tt.crit=out$t.crit\n\t\t\t\tw=transmission(v.out) # find the transmitted viral load at these contact events\n\t\t\t\tviral.counts=colSums(w) # find the total viral load due to the transmission events\n\t\t\t\tpositive=which(viral.counts>0) # find which transmission events included a positive number of viral particles\n\t\t\t\tif(length(positive)>0){ # if there were some real transmission events do the following\n\t\t\t\t\twho=c(who,rep(total-current+i,length(positive))) # make the current individual the parent of all the newly infected individuals \n\t\t\t\t\tmom.when=when[total-current+i] # find the time when mom was infected. \n\t\t\t\t\twhen=c(when,t[positive]+mom.when+t.crit) # add the times at which the newly infected individuals got infected\n\t\t\t\t\t\t\t\t\n\t\t\t\t\ttype=cbind(type,w[,positive]) # add the types for the newly infected individuals \n\t\t\t\t\t\t\tkids[i]=length(positive) # reset kids[i] to the number of newly infected individuals\t\n}\nif(length(positive)==0)kids[i]=0 # reset kids[i] when there where no infections\n\n\t\t\t}\n\t\t}\n\t\tgen=c(gen,rep(gen.count,sum(kids))) # add the generation times for all the newly infected individuals for the current generation \n\t\tcurrent=sum(kids) # update the count for the current number of infected individuals \n\t\ttotal=total+current # update the count for the cummulative number of infected individuals\n\t\tgen.count=gen.count+1 # increate the generation count\n\t\t\n\t}\n\t\n\treturn(list(when=when,who=who,type=type,gen=gen))\n\t\n\t\n}\n\n# running the simulation\nv=c(100,rep(0,k-1))\ncases=100\nout=between.host(v=v,cases=cases)\nout\n\n#plotting total viral sizes by generation?\n\ndata=matrix(0,max(out$gen)+1,k)\ntotals=numeric(max(out$gen)+1)\nfor(i in 0:(max(out$gen))){\n\tI=which(out$gen==i)\n\tif(length(I)>1)data[i+1,]=rowSums(out$type[,I])/length(I)\n\tif(length(I)==1)data[i+1,]=out$type[,I]\n\ttotals[i+1]=length(I)\n}\n\npar(cex.lab=1.5,cex.axis=1.5,mfrow=c(1,2))\nmatplot(data,type=\"b\",pch=21,bg=1:k,ylab=\"viral number per infected\",xlab=\"generation\")\nplot(totals,type=\"b\",pch=21,bg=\"black\",ylab=\"number of infected\",xlab=\"generation\")\n\n# computing all of the R0s for the single viral types. \nR.naught()\n\n\n\n",
    "created" : 1375723180489.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3028738850",
    "id" : "C4DB627E",
    "lastKnownWriteTime" : 1376888253,
    "path" : "~/Downloads/cross-scale-simulator (2).R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}