{
    "contents" : "# the cross scale simulator\n\n# basic idea of the model is that we have k viral strains\n# that compete within any infected host. The within-host\n# dynamics of these viral strains is specified by the within.host\n# function (e.g. a linear model below for illustrative purposes).\n# An infected host only begins transmitting when the total viral\n# load reaches the critical viral load (v.crit) which is calculated\n# in the function, critical. For a host with a given viral load\n# that has made a contact with an infected individual, the\n# function transmission determines the initial viral load in the\n# contacted individual. Finally, the function between.host runs\n# the full dynamics by tracking each generation of infected hosts.\n# These infected hosts can infect others for T units of time after\n# their viral load hits v.crit. During these T units of time, they\n# may contacts at a rate beta and transmit to the next generation of hosts\n\n# need the following library to compute the matrix exponential \n\nlibrary(Matrix)\n\n###########################\n# global parameter choices (can change this latter)\n###########################\n\nk=2; # number of viral types\nN=10^10 # maximal load\nv.crit=10^4 # critical load for transmission\nbeta=5/T # contact rate\nb=seq(1e-10,0.0,length=k) # weights for transmission\nT=15 # length of infeciton period after viral load hits v.crit\nt.max=15 # search for v.crit on the interval (0,t.max). \n#May need to adjust this depending on parameter values. \n\n\n# the within host dynamics parameters for a simple linear model of the form A=diag(r)+M \n\nr=seq(1.0, 0.0, length=k) # growth rates of viral types\nM=matrix(0,k,k) # mutation matrix (one steps to the right)\nM[-1,-k]=diag(k-k)*0.01\nA=M+diag(r) # the viral dynamic matrix\n\n##############################\n# the within host function\n##############################\n# input: initial condition v, vector of times \n# output: list with matrix with viral numbers at the desired times and the time to reaching v.crit\n# this within host model gives exponential growth until the population hits the maximal viral load\n# N at which time the dynamics are normalized. Note: this within.host function first solves the time\n# to v.crit with the function critical   and uses that initial condition. \n\nwithin.host=function(v,times){\n  L=length(times) # number of evaluations\n  k=length(v) # number of viral types\n  V=matrix(0,k,L) # matrix for output; columns are the viral loads at the specified times. \n  t.crit=critical(v) # solve for time to v.crit\n  for(i in 1:L){\n    temp=as.matrix(expm(A*(t.crit+times[i]))%*%v);\n    if(sum(temp)>N)temp=N*temp/sum(temp) # normalize if viral load is greater than N\n    V[,i]=temp\n  }\n  return(list(V=V,t.crit=t.crit))\n}\n\n#############################\n# the critical function\n#############################\n# input : viral column vector\n# output: time to reach v.crit\n\ncritical=function(v){\n  f=function(t)(sum(expm(A*t)%*%v)-v.crit)^2 \n  out=optimize(f,c(0,t.max))\n  t=out$minimum\n  return(t)\t\n}\n\n############################\n# single strain R0 function\n############################\n# input: nada\n# output: R0 (vector)\n# computes the R0s for the single strains \n\nR.naught=function(){\n  R=numeric(k)\n  for(i in 1:k){\n    S=function(t)exp(-b[i]*pmin(v.crit*exp(r[i]*t),N))\n    R[i]=beta*T*(1-integrate(S,0,T)$value/T)\n  }\n  return(R)\t\n}\n\n\n###################################\n# the transmission function\n###################################\n# input: matrix of viral column vectors\n# output: viral type of newly infected\n\ntransmission=function(V){\n  n=length(V[1,]) # number of viral vectors\n  W=matrix(rpois(n=k*n,lambda=V*b),k,n)\n  return(W)\n}\n\n#######################################\n# between host dynamics (the cross scale model)\n########################################\n# input: initial infected type v, maximum cases\n# output: list with who (who infected this individual, 0 for case 1), when (when was this individual infected), type (matrix of types)\n\nbetween.host=function(v,cases){\n  type=matrix(v,k,1) # holds the intial viral types for all individuals; dynamically increased by adding columns. \n  who=c(0) # vector of who was the parent of the infected individual\n  when=c(0) # when the individual was initially infected\n  gen=c(0) # generation when individual was infected\n  total=1 # total cases\n  current=1 # current cases\n  gen.count=1\n  \n  while(total<(cases+1)&&current>0){\n    # next line determines the number of contacts each individual in the current generation has with other individuals \n    kids=rpois(n=current,lambda=beta*T)\n    # the next loop determines at what times the contact events occur, the transmission of viral particles, and removes any instances where transmitted load is zero\n    for(i in 1:current){ # loop for all individuals in current generation\n      if(kids[i]>0){ # if current individual has a positive number of contacts do the following \n        v.start=type[,total-current+i] # get the initial viral load of the current individual \n        t=runif(kids[i])*T # find the times after t.crit at which the contact events occur\n        out=within.host(v,t) # find the viral load at the contact events and t.crit\n        v.out=out$V\n        t.crit=out$t.crit\n        w=transmission(v.out) # find the transmitted viral load at these contact events\n        viral.counts=colSums(w) # find the total viral load due to the transmission events\n        positive=which(viral.counts>0) # find which transmission events included a positive number of viral particles\n        if(length(positive)>0){ # if there were some real transmission events do the following\n          who=c(who,rep(total-current+i,length(positive))) # make the current individual the parent of all the newly infected individuals \n          mom.when=when[total-current+i] # find the time when mom was infected. \n          when=c(when,t[positive]+mom.when+t.crit) # add the times at which the newly infected individuals got infected\n          \n          type=cbind(type,w[,positive]) # add the types for the newly infected individuals \n          kids[i]=length(positive) # reset kids[i] to the number of newly infected individuals\t\n        }\n        if(length(positive)==0)kids[i]=0 # reset kids[i] when there where no infections\n        \n      }\n    }\n    gen=c(gen,rep(gen.count,sum(kids))) # add the generation times for all the newly infected individuals for the current generation \n    current=sum(kids) # update the count for the current number of infected individuals \n    total=total+current # update the count for the cummulative number of infected individuals\n    gen.count=gen.count+1 # increate the generation count\n    \n  }\n  \n  return(list(when=when,who=who,type=type,gen=gen))\n  \n  \n}\n\n# running the simulation\nv=c(10,rep(0,k-1))\ncases=100\nout=between.host(v=v,cases=cases)\nout\n\n#plotting total viral sizes by generation?\n\ndata=matrix(0,max(out$gen)+1,k)\ntotals=numeric(max(out$gen)+1)\nfor(i in 0:(max(out$gen))){\n  I=which(out$gen==i)\n  if(length(I)>1)data[i+1,]=rowSums(out$type[,I])/length(I)\n  if(length(I)==1)data[i+1,]=out$type[,I]\n  totals[i+1]=length(I)\n}\n\npar(cex.lab=1.5,cex.axis=1.5,mfrow=c(1,2))\nmatplot(data,type=\"b\",pch=21,bg=1:k,ylab=\"viral number per infected\",xlab=\"generation\")\nplot(totals,type=\"b\",pch=21,bg=\"black\",ylab=\"number of infected\",xlab=\"generation\")\n\n# computing all of the R0s for the single viral types. \nR.naught()\n",
    "created" : 1385489414035.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "338455895",
    "id" : "F2684A4A",
    "lastKnownWriteTime" : 1386046345,
    "path" : "~/Documents/Courses/SIRModels/2StrainCSS/CSSComparison/R Code/RSim.R",
    "project_path" : "RSim.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}